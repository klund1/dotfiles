# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet name "namespace" b
namespace ${1} {
${0}
}  // namespace ${1}
endsnippet

snippet for "range-based for loop" b
for (const ${1:auto}& ${2:element} : ${3:container}) {
  ${0}
}
endsnippet

snippet fori "index-based for loop" b
for (int i = 0; i < ${1}; ++i) {
  ${0}
}
endsnippet

snippet co "print to std::cout" b
std::cout << ${1} << std::endl;${0}
endsnippet

snippet ce "print to std::cerr" b
std::cerr << ${1} << std::endl;${0}
endsnippet

snippet is "#include <system>" b
#include <${1}>${0}
endsnippet

snippet i "#include" b
#include "${1}"${0}
endsnippet

snippet br "/// \brief" b
///
/// \brief ${1:TODO}
///
endsnippet

snippet class "class" b
class ${1} {
  public:
    ${1}();
	~${1}();

	${0}

  private:

};
endsnippet
